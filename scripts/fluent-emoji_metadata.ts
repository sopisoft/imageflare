/// <reference types="@types/bun" />
/// <reference types="@types/node" />

import fs from "node:fs";

interface FluentMetadata {
  cldr: string; // "window"
  fromVersion: string; // "13.0"
  glyph: string; // "ðŸªŸ"
  glyphAsUtfInEmoticons: string[]; // ["window"]
  group: string; // "Objects"
  keywords: string[]; // ["frame", "fresh air", "opening", "transparent", "view", "window"]
  mappedToEmoticons: string[]; // ["window"]
  tts: string; // "window"
  unicode: string; // "1fa9f"
}

const SkinTone = [
  "Dark",
  "Default",
  "Light",
  "Medium",
  "Medium-Dark",
  "Medium-Light",
] as const;
export type SkinTone = (typeof SkinTone)[number];

const Style = ["3D", "Color", "Flat", "High Contrast"] as const;
export type Style = (typeof Style)[number];

export interface Metadata {
  [key: string]: {
    cldr: string;
    hasSkinTones: boolean;
    skinTones: Partial<
      Record<SkinTone, Partial<Record<Style, string | null>>>
    > | null;
    styles: Partial<Record<Style, string | null>> | null;
  };
}

const assetsPath = "./src/submodules/fluent-emoji/assets";
const tsPath = "./src/assets/fluent-emoji_metadata.ts";

if (fs.existsSync(assetsPath)) {
  const metadata: Metadata = {};

  const assets = fs.readdirSync(assetsPath);

  for (const cldr of assets) {
    const folder = `${assetsPath}/${cldr}`;
    const metadataPath = `${folder}/metadata.json`;
    const exists = Bun.file(metadataPath).exists();
    if (!exists) {
      continue;
    }
    const json = (await Bun.file(metadataPath)
      .text()
      .then(JSON.parse)) as FluentMetadata;

    const hasSkinTones = fs.existsSync(`${folder}/Dark`);

    function makePath(style: Style, skinTone: SkinTone | null) {
      const ext = style === "3D" ? "png" : "svg";
      const base_filename = `${cldr
        .toLowerCase()
        .replace(" ", "_")}_${style.toLowerCase()}`;
      if (skinTone === null) {
        return `${cldr}/${style}/${base_filename}.${ext}`;
      }
      return `${cldr}/${skinTone}/${style}/${base_filename}_${skinTone
        .toLowerCase()
        .replace(" ", "_")}.${ext}`;
    }

    if (hasSkinTones) {
      // biome-ignore lint/suspicious/noExplicitAny: <explanation>
      const skinTones: Metadata[string]["skinTones"] = {} as any;
      for (const skinTone of SkinTone) {
        // biome-ignore lint/suspicious/noExplicitAny: <explanation>
        const styles: Record<Style, string | null> = {} as any;
        for (const style of Style) {
          const path = makePath(style, skinTone);
          if (fs.existsSync(`${assetsPath}/${path}`)) {
            styles[style] = path;
          }
        }
        if (Object.keys(styles).length > 0 && skinTones) {
          skinTones[skinTone] = styles;
        } else if (skinTones) {
          skinTones[skinTone] = undefined;
        }
      }
      metadata[json.glyph] = {
        cldr: json.cldr,
        hasSkinTones,
        skinTones,
        styles: null,
      };
    } else {
      // biome-ignore lint/suspicious/noExplicitAny: <explanation>
      const styles: Metadata[string]["styles"] = {} as any;
      for (const style of Style) {
        const path = makePath(style, null);
        if (fs.existsSync(`${assetsPath}/${path}`) && styles) {
          styles[style] = path;
        }
      }
      metadata[json.glyph] = {
        cldr: json.cldr,
        hasSkinTones,
        skinTones: null,
        styles,
      };
    }
  }

  let content = "";
  content += "// Do not edit this file directly.\n";
  content += "// This file is generated by scripts/fluent-emoji_metadata.ts\n";
  content +=
    "// To update this file, run `bun run ./scripts/fluent-emoji_metadata.ts`\n";
  content += "\n";
  content += `import type { Metadata } from "../../scripts/fluent-emoji_metadata";\n`;
  content += `export const metadata: Metadata = ${JSON.stringify(
    metadata,
    null,
    2
  )};`;

  await Bun.write(tsPath, content);
}
